# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc/ThingService.proto

require 'google/protobuf'


descriptor_data = "\n\x16rpc/ThingService.proto\x12\x03rpc\"!\n\x05Thing\x12\n\n\x02id\x18\x01 \x01(\r\x12\x0c\n\x04name\x18\x02 \x01(\t\",\n\x0fGetThingRequest\x12\n\n\x02id\x18\x01 \x01(\r\x12\r\n\x05sleep\x18\x02 \x01(\r\"-\n\x10GetThingResponse\x12\x19\n\x05thing\x18\x01 \x01(\x0b\x32\n.rpc.Thing\"1\n\x10GetThingsRequest\x12\x0e\n\x06search\x18\x01 \x01(\t\x12\r\n\x05limit\x18\x02 \x01(\r\"2\n\x14\x43reateThingsResponse\x12\x1a\n\x06things\x18\x01 \x03(\x0b\x32\n.rpc.Thing2\xc0\x04\n\x0cThingService\x12\x39\n\x08GetThing\x12\x14.rpc.GetThingRequest\x1a\x15.rpc.GetThingResponse\"\x00\x12\x32\n\tGetThings\x12\x15.rpc.GetThingsRequest\x1a\n.rpc.Thing\"\x00\x30\x01\x12\x39\n\x0c\x43reateThings\x12\n.rpc.Thing\x1a\x19.rpc.CreateThingsResponse\"\x00(\x01\x12\x34\n\x14\x43reateThingsInStream\x12\n.rpc.Thing\x1a\n.rpc.Thing\"\x00(\x01\x30\x01\x12\x38\n\x07GetFail\x12\x14.rpc.GetThingRequest\x1a\x15.rpc.GetThingResponse\"\x00\x12\x42\n\x11GetFieldErrorFail\x12\x14.rpc.GetThingRequest\x1a\x15.rpc.GetThingResponse\"\x00\x12L\n\x1bGetContextualFieldErrorFail\x12\x14.rpc.GetThingRequest\x1a\x15.rpc.GetThingResponse\"\x00\x12=\n\x0cGetException\x12\x14.rpc.GetThingRequest\x1a\x15.rpc.GetThingResponse\"\x00\x12\x45\n\x14GetUncaughtException\x12\x14.rpc.GetThingRequest\x1a\x15.rpc.GetThingResponse\"\x00\x62\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Rpc
  Thing = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("rpc.Thing").msgclass
  GetThingRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("rpc.GetThingRequest").msgclass
  GetThingResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("rpc.GetThingResponse").msgclass
  GetThingsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("rpc.GetThingsRequest").msgclass
  CreateThingsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("rpc.CreateThingsResponse").msgclass
end
