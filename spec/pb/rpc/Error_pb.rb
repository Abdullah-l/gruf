# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc/Error.proto

require 'google/protobuf'


descriptor_data = "\n\x0frpc/Error.proto\x12\x04gruf\"\x85\x01\n\x0b\x45rrorHeader\x12\x12\n\nerror_code\x18\x01 \x01(\t\x12\x15\n\rerror_message\x18\x02 \x01(\t\x12&\n\x0c\x66ield_errors\x18\x03 \x03(\x0b\x32\x10.gruf.FieldError\x12#\n\ndebug_info\x18\x04 \x01(\x0b\x32\x0f.gruf.DebugInfo\"K\n\nFieldError\x12\x12\n\nfield_name\x18\x01 \x01(\t\x12\x12\n\nerror_code\x18\x02 \x01(\t\x12\x15\n\rerror_message\x18\x03 \x01(\t\"0\n\tDebugInfo\x12\x0e\n\x06\x64\x65tail\x18\x01 \x01(\t\x12\x13\n\x0bstack_trace\x18\x02 \x03(\tB,\n\x08\x63om.grufZ github.com/bigcommerce/gruf/grufb\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Gruf
  ErrorHeader = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("gruf.ErrorHeader").msgclass
  FieldError = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("gruf.FieldError").msgclass
  DebugInfo = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("gruf.DebugInfo").msgclass
end
