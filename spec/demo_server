#!/usr/bin/env ruby
# coding: utf-8
# Copyright (c) 2017-present, BigCommerce Pty. Ltd. All rights reserved
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# use this file to spin up a test grpc server based on the files in support/grpc_server.rb
#
require 'rubygems'
require 'bundler'
Bundler.setup
require 'active_support/all'
require 'gruf'
$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)
$LOAD_PATH.unshift File.expand_path('../pb', __FILE__)
require File.realpath("#{File.dirname(__FILE__)}/support/grpc.rb")
require File.realpath("#{File.dirname(__FILE__)}/support/serializers/proto.rb")

class FakeStats
  def increment(k)
    Gruf.logger.info "statsd.increment: #{k}"
  end
  def timing(k, t)
    Gruf.logger.info "statsd.timing: #{k} -> #{t}"
  end
end

Gruf.configure do |c|
  c.server_binding_url = 'localhost:9001'
  c.error_serializer = Serializers::Proto
  c.backtrace_on_error = true
  c.interceptors.use(
    Gruf::Interceptors::Instrumentation::Statsd,
    client: FakeStats.new,
    prefix: 'demo'
  )
  c.interceptors.use(
    Gruf::Interceptors::Authentication::Basic,
    credentials: [{
      username: ENV.fetch('AUTH_USERNAME', 'grpc'),
      password: ENV.fetch('AUTH_PASSWORD', 'magic')
    }]
  )
  c.interceptors.use(
    Gruf::Interceptors::Instrumentation::RequestLogging::Interceptor,
    formatter: :plain,
    log_parameters: true
  )
  c.interceptors.use(Gruf::Interceptors::ActiveRecord::ConnectionReset)
end
Gruf.logger = Logger.new(STDOUT)
Gruf.services << ::Rpc::ThingService::Service

cli = Gruf::Cli::Executor.new
cli.run
